local sTempDLLData64 = [[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
c3Ryb3kA9gJMb2FkTGlicmFyeUEAACICR2V0UHJvY0FkZHJlc3MAAHoAQ3JlYXRlRmlsZU1hcHBpbmdBAAAPA01hcFZpZXdPZkZpbGUAqgFHZXRDdXJyZW50UHJvY2VzcwBSA1F1ZXJ5RG9zRGV2aWNl
QQBLBFVubWFwVmlld09mRmlsZQBEAENsb3NlSGFuZGxlAE0BRnJlZUxpYnJhcnkA9wFHZXRNb2R1bGVIYW5kbGVBAABLRVJORUwzMi5kbGwAAMUBX3N0cm5pY21wAMACc3RybmNtcADBAnN0cm5jcHkA
vwFfc3RyZHVwAF4CZnJlZQAAlwJtZW1jcHkAAL4Cc3RybGVuAACiAkhlYXBBbGxvYwCmAkhlYXBGcmVlAACpAkhlYXBSZUFsbG9jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANfQnkoAAAAA
AAABABgAAAAYAACAAAAAANfQnkoAAAAAAAABAAEAAAAwAACAAAAAANfQnkoAAAAAAAABAAkEAABIAAAAWFAAAGMCAAAAAAAAAAAAADw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04IiBz
dGFuZGFsb25lPSJ5ZXMiPz4KPGFzc2VtYmx5IHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MSIgbWFuaWZlc3RWZXJzaW9uPSIxLjAiPgogIDxhc3NlbWJseUlkZW50aXR5CiAg
ICB2ZXJzaW9uPSIxLjAuMC4wIgogICAgcHJvY2Vzc29yQXJjaGl0ZWN0dXJlPSJYODYiCiAgICBuYW1lPSJDb21wYW55TmFtZS5Qcm9kdWN0TmFtZS5Zb3VyQXBwIgogICAgdHlwZT0id2luMzIiIC8+
CiAgPGRlc2NyaXB0aW9uPjwvZGVzY3JpcHRpb24+CiAgPGRlcGVuZGVuY3k+CiAgICA8ZGVwZW5kZW50QXNzZW1ibHk+CiAgICAgIDxhc3NlbWJseUlkZW50aXR5CiAgICAgICAgdHlwZT0id2luMzIi
CiAgICAgICAgbmFtZT0iTWljcm9zb2Z0LldpbmRvd3MuQ29tbW9uLUNvbnRyb2xzIgogICAgICAgIHZlcnNpb249IjYuMC4wLjAiCiAgICAgICAgcHJvY2Vzc29yQXJjaGl0ZWN0dXJlPSJYODYiCiAg
ICAgICAgcHVibGljS2V5VG9rZW49IjY1OTViNjQxNDRjY2YxZGYiCiAgICAgICAgbGFuZ3VhZ2U9IioiIC8+CiAgICA8L2RlcGVuZGVudEFzc2VtYmx5PgogIDwvZGVwZW5kZW5jeT4KCjwvYXNzZW1i
bHk+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAABEAAAADDBMMGIw
kjC6MEgxlTGdMa8xujHEMdMx8zH9MQ4yGDInMjAyNzJLMlYyWzJsMnYygDLeMuoy8TL3MgAAACAAAJgAAAAaMCAwJjAsMDIwODA+MEQwSjBQMFYwXDBiMHkxtDG+MVs0YDSKNJM0JjUwNU41UzVZNWM1
bDV1NXw1gTWwNdU12zUDNgo2RDZLNqI2qTbFNsw2+zYCNyU3QTdIN2Q3azd5N5A3pzezN8o3zzfZN+I36TfuN/M3BTgoODA4NjhEOKg4rji0OLo4wDjGOMw4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]];
Crypto.Base64DecodeFromString(sTempDLLData64, _TempFolder.."\\Cursor7606idf.tmp");
CURSOR_DLL_PATH = _TempFolder.."\\Cursor7606idf.tmp";
--===========================================
-- Cursor.SaveSettings
--===========================================
function Cursor.SaveSettings(sFileName)
--IRLUA_PLUGIN_CheckNumArgs(arg,1)
--local sFileName = IRLUA_PLUGIN_CheckString(arg,1)
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
local nTotalCursors = Table.Count(CURSOR_CURSOR_FILE_HANDLES);

if not File.DoesExist(sFileName) then
TextFile.WriteFromString(sFileName, "[CURSORS]\r\n", false);
end

local nError = Application.GetLastError();
if nError then
local sCursorFileHandles = "";
--[[
// Create a file mapping object.
  hFileMap = CreateFileMapping(hFile, 
                    NULL, 
                    PAGE_READONLY,
                    0, 
                    1,
                    NULL);




  if (hFileMap) 
  {
    // Create a file mapping to get the file name.
    void* pMem = MapViewOfFile(hFileMap, FILE_MAP_READ, 0, 0, 1);

    if (pMem) 
    {
      if (GetMappedFileName (GetCurrentProcess(), 
                             pMem, 
                             pszFilename,
                             MAX_PATH)) 
      {

        // Translate path with device name to drive letters.
        TCHAR szTemp[BUFSIZE];
        szTemp[0] = '\0';



]]

	for x = 1, nTotalCursors do
	local nFileMap = DLL.CallFunction(_SystemFolder.."\\psapi.dll", "CreateFileMapping", ""..CURSOR_CURSOR_FILE_HANDLES[x]..""..", NULL, PAGE_READONLY, 0, 1, NULL", DLL_RETURN_TYPE_LONG, DLL_CALL_STDCALL);
	local nMemPoint = DLL.CallFunction(_SystemFolder.."\\psapi.dll", "MapViewOfFile", ""..CURSOR_CURSOR_FILE_HANDLES[x]..""..", FILE_MAP_READ, 0, 0, 1", DLL_RETURN_TYPE_LONG, DLL_CALL_STDCALL);
	result = DLL.CallFunction(_SystemFolder.."\\psapi.dll", "GetMappedFileNameA", ""..CURSOR_CURSOR_FILE_HANDLES[x]..""..","..nMemPoint.."".."MAX_PATH + 1, MAX_PATH", DLL_RETURN_TYPE_STRING, DLL_CALL_STDCALL);
	Dialog.Message("",result);
	INIFile.SetValue(sFileName, "CURSORS", ""..x.."", CURSOR_CURSOR_FILE_HANDLES[x]);
	end

else
Dialog.Message("Error in Cursor.SaveSettings()",  _tblErrorMessages[nError], MB_OK, MB_ICONNONE, MB_DEFBUTTON1);
end

end




--===========================================
-- Cursor.LoadSettings
--===========================================
function Cursor.LoadSettings(sFileName)
--IRLUA_PLUGIN_CheckNumArgs(arg,1)
--local sFileName = IRLUA_PLUGIN_CheckString(arg,1)
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
local tCursors = {};
tCursors[1] = 32650;
tCursors[2] = 32512;
tCursors[3] = 32515;
tCursors[4] = 32513;
tCursors[5] = 32641;
tCursors[6] = 32648;
tCursors[7] = 32640;
tCursors[8] = 32646;
tCursors[9] = 32643;
tCursors[10] = 32645;
tCursors[11] = 32649;
tCursors[12] = 32642;
tCursors[13] = 32644;
tCursors[14] = 32516;
tCursors[15] = 32514;

local tFileHandles = INIFile.GetValueNames(sFileName, "[CURSORS]");

if tFileHandles then

	if Table.Count(tFileHandles) == Table.Count(tCursors) then

		for nIndex, nCursor in tCursors do
			
			--if nCursor == nCursorID then
			DLL.CallFunction(_SystemFolder.."\\User32.dll", "SetSystemCursor",tFileHandles[nIndex]..","..nCursor, DLL_RETURN_TYPE_LONG, DLL_CALL_STDCALL);
			--relaod the file handle for the cursor and store it
			local nCursorHandle = DLL.CallFunction(_SystemFolder.."\\User32.dll", "LoadCursorA", "0, "..nCursor, DLL_RETURN_TYPE_LONG, DLL_CALL_STDCALL);
			--local nCursorFileHandle = DLL.CallFunction(_SystemFolder.."\\User32.dll", "CopyIcon", nCursorHandle, DLL_RETURN_TYPE_LONG, DLL_CALL_STDCALL);
			--CURSOR_CURSOR_FILE_HANDLES[nIndex] = nCursorFileHandle;
			--break;
			--end
			
		end
	
	else
	Dialog.Message("Error in Cursor.LoadSettings()",  "The settings file is corrupt.\r\nMissing cursor settings.", MB_OK, MB_ICONNONE, MB_DEFBUTTON1);
	end

else
Dialog.Message("Error in Cursor.LoadSettings()",  "The settings file is corrupt.\r\nInvalid file or file section.", MB_OK, MB_ICONNONE, MB_DEFBUTTON1);	
end

end



